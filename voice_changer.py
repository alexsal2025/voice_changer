import tkinter as tk
from tkinter import ttk, messagebox
import pyaudio
import numpy as np
import soundfile as sf
import librosa
from scipy import signal
import threading
import time

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
CHUNK = 1024
FORMAT = pyaudio.paInt16
CHANNELS = 1
RATE = 22050
MAX_DURATION = 60  # 1 –º–∏–Ω—É—Ç–∞
PITCH_SHIFT = 2    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é +2 –ø–æ–ª—É—Ç–æ–Ω–∞

class VoiceChangerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –∏–∑–º–µ–Ω—è—Ç–æ—Ä ‚Äî —Ç–æ–ª—å–∫–æ —Ç–æ–Ω (–±–µ–∑ —É—Å–∫–æ—Ä–µ–Ω–∏—è)")
        self.root.geometry("550x420")
        self.root.resizable(False, False)
        self.root.configure(bg="#f0f0f0")

        # –î–∞–Ω–Ω—ã–µ
        self.recording = False
        self.audio_data = None
        self.processed_data = None
        self.pitch_shift = tk.DoubleVar(value=PITCH_SHIFT)
        self.record_seconds = 0
        self.timer_running = False

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()

    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = tk.Label(
            self.root,
            text="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –∏–∑–º–µ–Ω—è—Ç–æ—Ä (—Ç–æ–ª—å–∫–æ —Ç–æ–Ω)",
            font=("Arial", 16, "bold"),
            bg="#f0f0f0",
            fg="#333"
        )
        title.pack(pady=10)

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instr = tk.Label(
            self.root,
            text="–ó–∞–ø–∏—à–∏ '—Ç—Ä–∞–ª—è–ª—è' ‚Äî –∏ –ø–æ–ª—É—á–∏ –≥–æ–ª–æ—Å —Å –¥—Ä—É–≥–∏–º —Ç–æ–Ω–æ–º!",
            font=("Arial", 11),
            bg="#f0f0f0",
            fg="#555"
        )
        instr.pack(pady=5)

        # –¢–∞–π–º–µ—Ä
        timer_frame = tk.Frame(self.root, bg="#f0f0f0")
        timer_frame.pack(pady=8)

        tk.Label(timer_frame, text="‚è± –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: ", bg="#f0f0f0", font=("Arial", 10)).pack(side=tk.LEFT)
        self.timer_label = tk.Label(timer_frame, text="00:00", bg="#f0f0f0", font=("Arial", 10, "bold"), fg="#d32f2f")
        self.timer_label.pack(side=tk.LEFT, padx=5)

        # –°–ª–∞–π–¥–µ—Ä —Ç–æ–Ω–∞
        pitch_frame = tk.Frame(self.root, bg="#f0f0f0")
        pitch_frame.pack(pady=10)

        tk.Label(pitch_frame, text="–¢–æ–Ω: ", bg="#f0f0f0").pack(side=tk.LEFT)
        pitch_slider = ttk.Scale(
            pitch_frame,
            from_=-12,
            to=12,
            orient=tk.HORIZONTAL,
            length=250,
            variable=self.pitch_shift,
            command=self.update_pitch_label
        )
        pitch_slider.pack(side=tk.LEFT, padx=5)

        self.pitch_label = tk.Label(pitch_frame, text="+2.0 –ø–æ–ª—É—Ç–æ–Ω–∞", bg="#f0f0f0", font=("Arial", 10))
        self.pitch_label.pack(side=tk.LEFT)

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = tk.Frame(self.root, bg="#f0f0f0")
        btn_frame.pack(pady=20)

        self.record_btn = tk.Button(
            btn_frame,
            text="‚è∫ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å",
            font=("Arial", 12),
            bg="#4CAF50",
            fg="white",
            width=15,
            command=self.toggle_recording
        )
        self.record_btn.grid(row=0, column=0, padx=5)

        self.process_btn = tk.Button(
            btn_frame,
            text="üîÑ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç",
            font=("Arial", 12),
            bg="#2196F3",
            fg="white",
            width=15,
            state=tk.DISABLED,
            command=self.process_audio
        )
        self.process_btn.grid(row=0, column=1, padx=5)

        self.play_btn = tk.Button(
            btn_frame,
            text="‚ñ∂ –ü—Ä–æ–∏–≥—Ä–∞—Ç—å",
            font=("Arial", 12),
            bg="#FF9800",
            fg="white",
            width=15,
            state=tk.DISABLED,
            command=self.play_audio
        )
        self.play_btn.grid(row=1, column=0, padx=5, pady=10)

        self.save_btn = tk.Button(
            btn_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            font=("Arial", 12),
            bg="#9C27B0",
            fg="white",
            width=15,
            state=tk.DISABLED,
            command=self.save_audio
        )
        self.save_btn.grid(row=1, column=1, padx=5, pady=10)

        # –°—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤–æ")
        self.status_label = tk.Label(
            self.root,
            textvariable=self.status_var,
            font=("Arial", 10),
            bg="#f0f0f0",
            fg="#666"
        )
        self.status_label.pack(pady=10)

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        hint = tk.Label(
            self.root,
            text="‚ùó –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∏—Å–∏. –¢–æ–ª—å–∫–æ —Ç–æ–Ω –º–µ–Ω—è–µ—Ç—Å—è!",
            font=("Arial", 9),
            bg="#f0f0f0",
            fg="#888"
        )
        hint.pack(side=tk.BOTTOM, pady=10)

    def update_pitch_label(self, value):
        self.pitch_label.config(text=f"{float(value):+.1f} –ø–æ–ª—É—Ç–æ–Ω–∞")

    def toggle_recording(self):
        if self.recording:
            self.stop_recording()
        else:
            self.start_recording()

    def start_recording(self):
        if self.recording:
            return

        self.recording = True
        self.record_seconds = 0
        self.timer_running = True
        self.status_var.set("üéô –ó–∞–ø–∏—Å—å... (–º–∞–∫—Å. 60 —Å–µ–∫)")
        self.record_btn.config(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", bg="#f44336")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        threading.Thread(target=self._update_timer, daemon=True).start()
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
        threading.Thread(target=self._record_audio, daemon=True).start()

    def stop_recording(self):
        self.recording = False
        self.timer_running = False
        self.status_var.set("‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        self.record_btn.config(text="‚è∫ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å", bg="#4CAF50")
        self.process_btn.config(state=tk.NORMAL)

    def _update_timer(self):
        while self.timer_running and self.record_seconds < MAX_DURATION:
            time.sleep(1)
            self.record_seconds += 1
            mins, secs = divmod(self.record_seconds, 60)
            self.timer_label.config(text=f"{mins:02}:{secs:02}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        if self.record_seconds >= MAX_DURATION and self.recording:
            self.stop_recording()

    def _record_audio(self):
        p = pyaudio.PyAudio()
        stream = p.open(
            format=FORMAT,
            channels=CHANNELS,
            rate=RATE,
            input=True,
            frames_per_buffer=CHUNK
        )

        frames = []
        total_chunks = int(RATE / CHUNK * MAX_DURATION)

        for i in range(total_chunks):
            if not self.recording:
                break
            data = stream.read(CHUNK)
            frames.append(data)

        stream.stop_stream()
        stream.close()
        p.terminate()

        self.audio_data = np.frombuffer(b''.join(frames), dtype=np.int16)
        self.timer_running = False
        self.timer_label.config(text="00:00")

    def process_audio(self):
        if self.audio_data is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å!")
            return

        self.status_var.set("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞... (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)")
        self.root.update()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float32 –¥–ª—è librosa
        audio_float = self.audio_data.astype(np.float32) / 32768.0

        # –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–Ω (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
        # librosa.effects.pitch_shift –Ω–µ –º–µ–Ω—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        shifted_audio = librosa.effects.pitch_shift(
            y=audio_float,
            sr=RATE,
            n_steps=self.pitch_shift.get()
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ int16
        shifted_audio = np.clip(shifted_audio, -1.0, 1.0)
        shifted_audio = (shifted_audio * 32767).astype(np.int16)

        self.processed_data = shifted_audio
        self.status_var.set("‚úÖ –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω—ë–Ω!")
        self.play_btn.config(state=tk.NORMAL)
        self.save_btn.config(state=tk.NORMAL)

    def play_audio(self):
        if self.processed_data is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç!")
            return

        self.status_var.set("‚ñ∂ –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ...")
        self.root.update()

        p = pyaudio.PyAudio()
        stream = p.open(
            format=FORMAT,
            channels=CHANNELS,
            rate=RATE,
            output=True,
            frames_per_buffer=CHUNK
        )

        chunk_size = CHUNK
        for i in range(0, len(self.processed_data), chunk_size):
            chunk = self.processed_data[i:i+chunk_size]
            stream.write(chunk.tobytes())

        stream.stop_stream()
        stream.close()
        p.terminate()

        self.status_var.set("‚úÖ –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ!")

    def save_audio(self):
        if self.processed_data is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç!")
            return

        sf.write("output.wav", self.processed_data, RATE)
        self.status_var.set("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ 'output.wav'")


# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if __name__ == "__main__":
    root = tk.Tk()
    app = VoiceChangerApp(root)
    root.mainloop()